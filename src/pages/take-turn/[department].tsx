import LoaderSpinner from '@/components/loaderSpinner';
import connectDB from '@/models/mongoConnection';
import Department from '@/models/mongoSchemas/departmentSchema';
import {
  Box,
  Button,
  Center,
  Heading,
  VStack,
  useToast,
} from '@chakra-ui/react';
import { GetServerSidePropsContext } from 'next';
import Head from 'next/head';
import { useRouter } from 'next/router';
import { useEffect, useState } from 'react';

interface TakeTurnProps {
  department: string;
}

export async function getServerSideProps(context: GetServerSidePropsContext) {
  await connectDB();

  const department = context.params?.department;

  const validateDepartment = await Department.findOne({
    name: department,
    available: true,
  });

  if (!validateDepartment) {
    return {
      notFound: true,
    };
  }

  return {
    props: { department: department },
  };
}

export default function TakeTurn({ department }: TakeTurnProps) {
  // - Esta pagina sera donde los usuarios sacaran sus turnos
  // --------- HOOKS --------- //
  const router = useRouter();
  const toast = useToast();

  const [queue, setQueue] = useState<any>(null);

  // --------- SACAR UN TURNO --------- //
  const takeTurn = async () => {
    await fetch('/api/createTurn', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        department_name: department,
      }),
    }).then(async (res) => {
      const data = await res.json();

      if (res.status == 200) {
        router.push(`/my-turn?turn_id=${data.turn_id}`);
      } else if (res.status == 400) {
        toast({
          title: 'Error al sacar turno',
          description: data.message,
          variant: 'left-accent',
          status: 'error',
          duration: 9000,
          isClosable: true,
        });
      } else {
        toast({
          title: 'Error al sacar turno',
          description: 'Error desconocido',
          status: 'error',
          duration: 9000,
          isClosable: true,
        });
      }
    });
  };

  // --------- OBTENER LA FILA DE TURNOS --------- //
  const getQueue = async () => {
    await fetch(`/api/getQueue?department_name=${department}`).then(
      async (res) => {
        const data = await res.json();

        if (res.status == 200) {
          setQueue(data.queue_data);
        } else if (res.status == 404) {
          setQueue('404');
        } else if (res.status == 400) {
          toast({
            title: 'Error al consultar la fila',
            description: data.message,
            variant: 'left-accent',
            status: 'error',
            duration: 9000,
            isClosable: true,
          });
        } else {
          toast({
            title: 'Error al consultar la fila',
            description: 'Error desconocido',
            status: 'error',
            duration: 9000,
            isClosable: true,
          });
        }
      }
    );

    setTimeout(() => {
      getQueue();
    }, 5000);
  };

  // --------- USE EFFECT --------- //
  useEffect(() => {
    getQueue();
  }, []);

  return (
    <>
      <Head>
        <title>UAL - Take Turn</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <Center minH="100vh" flexDirection="column" bgColor="gray.100" py={6}>
          <VStack spacing={5}>
            <Heading as="h2" size="xl">
              {department}
            </Heading>

            <Box display="flex" gap={3}>
              <Button
                colorScheme="red"
                onClick={() => {
                  router.push('/');
                }}
              >
                Cancelar
              </Button>

              <Button colorScheme="teal" onClick={takeTurn}>
                Sacar turno
              </Button>

              <Button
                variant="outline"
                colorScheme="teal"
                onClick={() => {
                  router.push(`/see-turns/${department}`);
                }}
              >
                Pantalla de Turnos
              </Button>
            </Box>

            <Box
              w="80%"
              borderWidth="1px"
              borderRadius="lg"
              backgroundColor={'white'}
              p={5}
              boxShadow="lg"
            >
              {queue == null ? (
                <>
                  <LoaderSpinner size="xl" paddingY="2rem" />
                </>
              ) : queue == '404' ? (
                <Center height="100px" textAlign={'center'}>
                  No hay turnos de momento...
                </Center>
              ) : (
                <>
                  <Heading as="h4" size="md" mb={2} fontWeight={'medium'}>
                    Personas delante: {queue.length}
                  </Heading>

                  {queue.map((turn: any) => {
                    return (
                      <Box
                        key={turn.turn_id}
                        textAlign={'center'}
                        borderBottom="1px solid"
                        borderColor="gray.200"
                        p={2}
                      >
                        {turn.turn}
                      </Box>
                    );
                  })}
                </>
              )}
            </Box>
          </VStack>
        </Center>
      </main>
    </>
  );
}
