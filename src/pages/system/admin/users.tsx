import MyUserCard from '@/components/cards/myUserCard';
import NewUserCard from '@/components/cards/newUserCard';
import UserCard from '@/components/cards/userCard';
import NavBar from '@/components/layout/navbar';
import LoaderSpinner from '@/components/loaderSpinner';
import { withSessionSsr } from '@/lib/auth/witSession';
import useHasMounted from '@/lib/hasMounted';
import connectDB from '@/models/mongoConnection';
import ServicePoint from '@/models/mongoSchemas/servicePointScheme';
import {
  Box,
  Center,
  Divider,
  Flex,
  Grid,
  GridItem,
  Heading,
} from '@chakra-ui/react';
import Head from 'next/head';
import { useRouter } from 'next/router';
import { useEffect, useState } from 'react';

export interface UsersPageProps {
  user: any;
  servicePoints: any;
}

export const getServerSideProps = withSessionSsr(
  async ({ req, res }: { req: any; res: any }) => {
    await connectDB();

    const user = req.session.user;
    const servicePointsFetching = await ServicePoint.find({}).sort({
      createdAt: -1,
    });
    const servicePoints = JSON.parse(JSON.stringify(servicePointsFetching));

    if (!user) {
      return {
        props: { user: null, servicePoints: servicePoints },
      };
    }

    return {
      props: { user: user, servicePoints: servicePoints },
    };
  }
);

export default function UsersPage({ user, servicePoints }: UsersPageProps) {
  // - Esta es la pagina de inicio del sistema para empleados
  const router = useRouter();
  const hasMounted = useHasMounted();

  // ------- USESTATE DECLARATIONS ------- //
  const [myUser, setMyUser] = useState<any>(null);
  const [users, setUsers] = useState<any>(null);

  // ------- OBTENER MI USUARIO ------- //
  const getMyUser = async () => {
    await fetch(`/api/users/getUser?user_id=${user._id}`).then(async (res) => {
      if (res.status == 200) {
        const data = await res.json();

        // - Si el rol del usuario fue actualizado cerrar sesion
        if (
          data.user_data.rol != user.rol ||
          data.user_data.status == 'inactive'
        ) {
          await fetch('/api/logout');
          router.push('/login');
        }

        setMyUser(data.user_data);
      }
    });
  };

  // ------- OBTENER USUARIOS ------- //
  const getUsers = async () => {
    await fetch(`/api/users/getUsers?user_id=${user._id}`).then(async (res) => {
      const data = await res.json();

      if (res.status == 200) {
        setUsers(data.users_data);
      }
    });
  };

  // ------- USEEFFECTS ------- //
  useEffect(() => {
    // - If the user is not logged in, redirect to /login
    if (!user || (user.rol != 'admin' && user.rol != 'superadmin')) {
      router.push('/login');

      return;
    }

    getMyUser();
  }, []);

  // - Si mi usuario se actualiza, actualizar la pagina
  useEffect(() => {
    if (myUser) {
      getUsers();
    }
  }, [myUser]);

  // - If the user is not logged in, redirect to /login
  if (!user || (user.rol != 'admin' && user.rol != 'superadmin')) {
    return <div>Redirecting...</div>;
  }

  // - Page
  return (
    <>
      <Head>
        <title>UAL - Usuarios</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <NavBar rol={user.rol} name={user.username} />

        {/* HEADER DE LA PAGINA */}
        <Box>
          <Box h={'70px'} w={'100%'} gap={0}>
            <Flex h={'100%'}>
              <Center>
                <Heading as={'h1'} fontSize={'25px'} fontWeight={'bold'} pl={6}>
                  Gestion de Usuarios
                </Heading>
              </Center>
            </Flex>
          </Box>

          <Box pt={2} px={3}>
            <Divider
              borderWidth={'1px'}
              borderStyle={'solid'}
              borderRadius={10}
              borderColor={'green.500'}
            />
          </Box>
        </Box>

        {/* PAGINA DE USUARIOS */}
        <Box px={3} py={2}>
          <Grid templateColumns="repeat(4, 1fr)" gap={0}>
            {/* CARD PARA NUEVO USUARIO */}
            <GridItem>
              {hasMounted ? (
                <NewUserCard
                  setUsers={setUsers}
                  userRol={user.rol}
                  servicePoints={servicePoints}
                  reloadUsers={getUsers}
                />
              ) : (
                <LoaderSpinner paddingY="10rem" size="xl" />
              )}
            </GridItem>

            {/* CARD PARA VER MI USUARIO */}
            <GridItem>
              {myUser ? (
                <MyUserCard user={myUser} reloadUser={getMyUser} />
              ) : (
                <LoaderSpinner paddingY="10rem" size="xl" />
              )}
            </GridItem>

            {users ? (
              <>
                {/* CARDS PARA VER USUARIOS */}
                {users.map((user: any) => {
                  return (
                    <GridItem key={user._id}>
                      <UserCard
                        myRol={myUser?.rol}
                        user={user}
                        servicePoints={servicePoints}
                        reloadUsers={getUsers}
                      />
                    </GridItem>
                  );
                })}
              </>
            ) : (
              <>
                {/* LOADER SPINNERS */}
                <GridItem>
                  <LoaderSpinner paddingY="10rem" size="xl" />
                </GridItem>

                <GridItem>
                  <LoaderSpinner paddingY="10rem" size="xl" />
                </GridItem>
              </>
            )}
          </Grid>
        </Box>
      </main>
    </>
  );
}
