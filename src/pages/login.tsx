import { withSessionSsr } from '@/lib/auth/witSession';
import {
  Box,
  Button,
  Flex,
  FormControl,
  FormLabel,
  Heading,
  Input,
  Stack,
  useColorModeValue,
  useToast,
} from '@chakra-ui/react';
import Head from 'next/head';
import { useRouter } from 'next/router';
import { useEffect, useState } from 'react';

export interface LoginProps {
  user: any;
}

export const getServerSideProps = withSessionSsr(
  async ({ req, res }: { req: any; res: any }) => {
    const user = req.session.user;

    if (!user) {
      return {
        props: { user: null },
      };
    }

    return {
      props: { user },
    };
  }
);

export default function Login({ user }: LoginProps) {
  // - Esta pagina sera donde los empleados iniciaran sesion
  // ----------- HOOKS ----------- //
  const toast = useToast();
  const router = useRouter();

  // ----------- USESTATE DECLARATIONS ----------- //
  const [mail, setMail] = useState('');
  const [password, setPassword] = useState('');

  // ----------- INICIAR SESION ----------- //
  const handleSubmit = async () => {
    // - Verificar que los campos no esten vacios
    if (mail === '' || password === '') {
      toast({
        title: 'Error',
        description: 'Por favor, complete todos los campos',
        variant: 'left-accent',
        status: 'error',
        duration: 5000,
        isClosable: true,
      });

      return;
    }

    const response = await fetch('/api/sessions', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ mail, password }),
    });

    if (response.ok) {
      // - Si el usuario es valido, redirigirlo a la pagina del sistema
      return router.push('/system');
    } else {
      // - Si el usuario no es valido, mostrar un mensaje de error
      toast({
        title: 'Error al iniciar sesion',
        description: 'Correo o contraseña incorrectos',
        variant: 'left-accent',
        status: 'error',
        duration: 5000,
        isClosable: true,
      });

      setPassword('');
    }
  };

  useEffect(() => {
    // - If the user is not logged in, redirect to /login
    if (user) {
      router.push('/system');
    }
  }, []);

  // - If the user is logged in, redirect to /system
  if (user) {
    return <div>Redirecting...</div>;
  }

  return (
    <>
      {/* // ----------- HEAD ----------- // */}
      <Head>
        <title>UAL - Login</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {/* // ----------- MAIN ----------- // */}
      <main>
        <Flex
          minH={'100vh'}
          align={'center'}
          justify={'center'}
          bg={useColorModeValue('gray.50', 'gray.800')}
        >
          <Stack spacing={8} mx={'auto'} maxW={'lg'} py={12} px={6}>
            <Stack align={'center'}>
              <Heading fontSize={'3xl'}>
                Inicia sesion con tu cuenta UAL
              </Heading>
            </Stack>

            <Box
              rounded={'lg'}
              bg={useColorModeValue('white', 'gray.700')}
              boxShadow={'lg'}
              p={8}
            >
              <Stack spacing={4}>
                <FormControl id="email">
                  <FormLabel>Correo electronico:</FormLabel>
                  <Input
                    type="email"
                    value={mail}
                    onChange={(e) => {
                      setMail(e.target.value);
                    }}
                  />
                </FormControl>

                <FormControl id="password">
                  <FormLabel>Contraseña:</FormLabel>
                  <Input
                    type="password"
                    value={password}
                    onChange={(e) => {
                      setPassword(e.target.value);
                    }}
                    onKeyDown={(e) => {
                      if (e.key === 'Enter') {
                        handleSubmit();
                      }
                    }}
                  />
                </FormControl>

                <Stack spacing={10}>
                  <Button
                    bg={'blue.400'}
                    color={'white'}
                    _hover={{
                      bg: 'blue.500',
                    }}
                    onClick={handleSubmit}
                  >
                    Iniciar Sesion
                  </Button>
                </Stack>
              </Stack>
            </Box>
          </Stack>
        </Flex>
      </main>
    </>
  );
}
